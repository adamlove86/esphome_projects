substitutions:
  # Time variables
  morning_hour_threshold: '8'    # Hour before which certain actions occur (e.g., 8 AM)
  evening_hour_threshold: '17'   # Hour after which certain actions occur (e.g., 5 PM)
  display_update_interval: '15'  # Regular display refresh interval in minutes
  initial_refresh_delay: '1'     # Delay after boot-up before the first refresh (in minutes)

  # Device configuration
  device_ip: !secret epaper_device_ip  # IP address of the ePaper display device

  # Entity IDs
  person_entity: !secret person_entity          # Entity ID of the person to monitor for presence
  calendar_entity_1: !secret calendar_entity_1  # First calendar entity ID
  calendar_entity_2: !secret calendar_entity_2  # Second calendar entity ID
  calendar_entity_3: !secret calendar_entity_3  # Third calendar entity ID

  # Image paths
  image_red_layer_path: !secret image_red_layer_path    # Path to the red layer image file
  image_black_layer_path: !secret image_black_layer_path  # Path to the black layer image file

  # Sensor entity IDs (these are not sensitive)
  weather_temperature_entity: 'sensor.home_realfeel_temperature'  # Entity ID for weather temperature
  kitchen_temperature_entity: 'sensor.kitchennode_apparent_temperature'  # Entity ID for kitchen temperature
  bedroom_temperature_entity: 'sensor.bedroomnode_apparent_temperature'  # Entity ID for bedroom temperature
  bathroom_temperature_entity: 'sensor.bathrooomnode_apparent_temperature'  # Entity ID for bathroom temperature
  total_steps_entity: 'sensor.total_steps'  # Entity ID for total steps count
  active_calories_entity: 'sensor.active_kilocalories'  # Entity ID for active calories burned
  active_time_entity: 'sensor.highly_active_time'  # Entity ID for active time
  sleep_duration_entity: 'sensor.sleep_duration'  # Entity ID for sleep duration
  weather_max_temp_entity: 'sensor.home_realfeel_temperature_max_today'  # Entity ID for today's max temperature
  weather_min_temp_entity: 'sensor.home_realfeel_temperature_min_today'  # Entity ID for today's min temperature
  weather_precipitation_entity: 'sensor.home_precipitation'  # Entity ID for precipitation

  # Text sensor entity IDs (these are not sensitive)
  weather_entity: 'weather.home'          # Entity ID for weather condition
  todo_list_entity: 'todo.my_tasks'       # Entity ID for the to-do list

esphome:
  name: epaper-display
  platform: ESP32
  board: esp32dev
  on_boot:
    priority: 200.0
    then:
      - lambda: |-
          id(boot_time) = id(homeassistant_time).now().timestamp;

external_components:
  - source:
      type: git
      url: https://github.com/twisterss/esphome-dev.git
      ref: waveshare-red-black
    components: [ waveshare_epaper ]

# Do not change the following:
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: ${device_ip}

  ap:
    ssid: "Epaper Display Fallback Hotspot"
    password: !secret wifi_password

captive_portal:

logger:
  level: INFO
  logs:
    waveshare_epaper: INFO

api:
  encryption:
    key: !secret epaper_display_key

ota:
  - platform: esphome
    password: !secret ota_password

web_server:
  port: 80

spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14

font:
  - file: "fonts/Arial.ttf"
    id: font_small
    size: 21  # Increased font size

  - file: "fonts/ARIALBD.TTF"
    id: font_small_bold
    size: 21  # Increased font size

  - file: "fonts/ARIALI.TTF"
    id: font_small_italic
    size: 21  # Increased font size

  - file: "fonts/ARIALBD.TTF"
    id: font_medium_bold
    size: 24  # Increased font size

  - file: "fonts/Arial.ttf"
    id: font_large
    size: 30  # Increased font size

time:
  - platform: homeassistant
    id: homeassistant_time

sensor:
  - platform: homeassistant
    id: weather_temperature
    entity_id: ${weather_temperature_entity}

  - platform: homeassistant
    id: kitchen_temperature
    entity_id: ${kitchen_temperature_entity}

  - platform: homeassistant
    id: bedroom_temperature
    entity_id: ${bedroom_temperature_entity}

  - platform: homeassistant
    id: bathroom_temperature
    entity_id: ${bathroom_temperature_entity}

  - platform: homeassistant
    id: total_steps
    entity_id: ${total_steps_entity}

  - platform: homeassistant
    id: active_calories
    entity_id: ${active_calories_entity}

  - platform: homeassistant
    id: active_time
    entity_id: ${active_time_entity}

  - platform: homeassistant
    id: sleep_duration
    entity_id: ${sleep_duration_entity}

  - platform: homeassistant
    id: weather_max_temp
    entity_id: ${weather_max_temp_entity}

  - platform: homeassistant
    id: weather_min_temp
    entity_id: ${weather_min_temp_entity}

  - platform: homeassistant
    id: weather_precipitation
    entity_id: ${weather_precipitation_entity}

  # Added Uptime Sensor
  - platform: uptime
    name: "Device Uptime"
    id: device_uptime
    update_interval: 60s

text_sensor:
  - platform: homeassistant
    id: weather_condition
    entity_id: ${weather_entity}
    attribute: state

  - platform: homeassistant
    id: todo_list
    entity_id: ${todo_list_entity}

  - platform: homeassistant
    id: calendar_1
    entity_id: ${calendar_entity_1}
    attribute: message

  - platform: homeassistant
    id: calendar_1_time
    entity_id: ${calendar_entity_1}
    attribute: start_time

  - platform: homeassistant
    id: calendar_2
    entity_id: ${calendar_entity_2}
    attribute: message

  - platform: homeassistant
    id: calendar_2_time
    entity_id: ${calendar_entity_2}
    attribute: start_time

  - platform: homeassistant
    id: calendar_3
    entity_id: ${calendar_entity_3}
    attribute: message

  - platform: homeassistant
    id: calendar_3_time
    entity_id: ${calendar_entity_3}
    attribute: start_time

  - platform: homeassistant
    id: person_presence
    entity_id: ${person_entity}

  - platform: template
    name: "Time Since Last Refresh"
    id: time_since_last_refresh_text
    lambda: |-
      int seconds = id(homeassistant_time).now().timestamp - id(last_display_update);
      if (seconds < 0) {
        seconds = 0;  // Prevent negative values
      }
      int minutes = seconds / 60;
      int remaining_seconds = seconds % 60;
      char buffer[16];
      snprintf(buffer, sizeof(buffer), "%d min %d s", minutes, remaining_seconds);
      return {buffer};
    update_interval: '60s'

  # Added Device IP Text Sensor
  - platform: wifi_info
    ip_address:
      name: "Device IP"
      id: device_ip

select:
  - platform: template
    name: "Morning Hour Threshold"
    id: morning_hour_threshold_select
    options: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"]
    initial_option: "8"
    set_action:
      - lambda: |-
          id(morning_hour_threshold) = atoi(x.c_str());

  - platform: template
    name: "Evening Hour Threshold"
    id: evening_hour_threshold_select
    options: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"]
    initial_option: "17"
    set_action:
      - lambda: |-
          id(evening_hour_threshold) = atoi(x.c_str());

  - platform: template
    name: "Display Update Interval (minutes)"
    id: display_update_interval_select
    options: ["1", "5", "10", "15", "20", "25", "30", "45", "60", "120"]
    initial_option: "15"
    set_action:
      - lambda: |-
          id(display_update_interval) = atoi(x.c_str());

globals:
  - id: morning_hour_threshold
    type: int
    restore_value: yes
    initial_value: ${morning_hour_threshold}
  - id: evening_hour_threshold
    type: int
    restore_value: yes
    initial_value: ${evening_hour_threshold}
  - id: display_update_interval
    type: int
    restore_value: yes
    initial_value: ${display_update_interval}  # in minutes
  - id: initial_refresh_delay
    type: int
    restore_value: no
    initial_value: ${initial_refresh_delay}  # in minutes
  - id: last_display_update
    type: int
    restore_value: no
    initial_value: '0'
  - id: manual_override
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_refresh_done
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: boot_time
    type: int
    restore_value: no
    initial_value: '0'

color:
  - id: CUSTOM_RED
    red: 100%
    green: 0%
    blue: 0%
    white: 0%

image:
  - file: "${image_black_layer_path}"
    id: black_layer
    type: TRANSPARENT_BINARY
  - file: "${image_red_layer_path}"
    id: red_layer
    type: TRANSPARENT_BINARY

button:
  - platform: template
    name: "Force Display Update"
    id: force_display_update
    on_press:
      - script.execute: refresh_screen

switch:
  - platform: template
    name: "Display Image"
    id: display_image
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - lambda: |-
          id(last_display_update) = id(homeassistant_time).now().timestamp;
      - script.execute: refresh_screen
      - globals.set:
          id: manual_override
          value: 'true'

    turn_off_action:
      - lambda: |-
          id(last_display_update) = id(homeassistant_time).now().timestamp;
      - script.execute: refresh_screen
      - globals.set:
          id: manual_override
          value: 'true'

  - platform: template
    name: "Auto Display Image"
    id: auto_display_image
    internal: true
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - script.execute: refresh_screen
    turn_off_action:
      - script.execute: refresh_screen

script:
  - id: refresh_screen
    mode: restart
    then:
      - lambda: |-
          id(last_display_update) = id(homeassistant_time).now().timestamp;
      - component.update: epaper_display

display:
  - platform: waveshare_epaper
    id: epaper_display
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin:
      number: GPIO25
      inverted: true
    reset_pin: GPIO26
    model: 7.50in-bv2-rb
    reset_duration: 2ms
    update_interval: never
    rotation: 0
    lambda: |-
      if (id(display_image).state || id(auto_display_image).state) {
        it.fill(COLOR_OFF);
        // Note: Due to firmware quirk, Color::WHITE renders as black
        it.image(0, 0, id(black_layer), Color::WHITE);
        it.image(0, 0, id(red_layer), CUSTOM_RED);
        return;
      }

      // Clear the display
      it.fill(COLOR_OFF);

      // Margins and positions
      const int margin = 10;
      int y = margin + 5;
      int left_x = margin;
      int right_x = it.get_width() / 2 + margin;

      // Date
      auto current_time = id(homeassistant_time).now();
      char date_str[64];
      current_time.strftime(date_str, sizeof(date_str), "%A, %d %B, %Y");

      it.print(margin, y, id(font_large), CUSTOM_RED, date_str);
      y += 45; // Move down after date (adjusted for larger font)

      // Left Column
      int left_y = y;
      int line_height_small = 32; // 21px font size * 1.5
      int line_height_medium = 36; // 24px font size * 1.5

      // Weather Section Title
      it.print(left_x, left_y, id(font_medium_bold), COLOR_ON, "Weather");
      left_y += line_height_medium;

      // Current Temperature
      if (!isnan(id(weather_temperature).state)) {
        it.printf(left_x, left_y, id(font_medium_bold), COLOR_ON, "%.1f°C", id(weather_temperature).state);
      } else {
        it.print(left_x, left_y, id(font_small_italic), COLOR_ON, "N/A");
      }
      left_y += line_height_medium;

      // Max Temperature
      if (!isnan(id(weather_max_temp).state)) {
        it.printf(left_x, left_y, id(font_small), COLOR_ON, "Max: %.1f°C", id(weather_max_temp).state);
      } else {
        it.print(left_x, left_y, id(font_small_italic), COLOR_ON, "Max: N/A");
      }
      left_y += line_height_small;

      // Min Temperature
      if (!isnan(id(weather_min_temp).state)) {
        it.printf(left_x, left_y, id(font_small), COLOR_ON, "Min: %.1f°C", id(weather_min_temp).state);
      } else {
        it.print(left_x, left_y, id(font_small_italic), COLOR_ON, "Min: N/A");
      }
      left_y += line_height_small;

      // Rain
      if (!isnan(id(weather_precipitation).state)) {
        it.printf(left_x, left_y, id(font_small), CUSTOM_RED, "Rain: %.1f mm", id(weather_precipitation).state);
      } else {
        it.print(left_x, left_y, id(font_small_italic), COLOR_ON, "Rain: N/A");
      }
      left_y += line_height_small + 10; // Extra spacing before next section

      // Room Temperatures Section Title
      it.print(left_x, left_y, id(font_medium_bold), COLOR_ON, "Room Temperatures");
      left_y += line_height_medium;

      // Kitchen Temperature
      if (!isnan(id(kitchen_temperature).state)) {
        it.printf(left_x, left_y, id(font_small), COLOR_ON, "Kitchen: %.1f°C", id(kitchen_temperature).state);
      } else {
        it.print(left_x, left_y, id(font_small_italic), COLOR_ON, "Kitchen: N/A");
      }
      left_y += line_height_small;

      // Bedroom Temperature
      if (!isnan(id(bedroom_temperature).state)) {
        it.printf(left_x, left_y, id(font_small), COLOR_ON, "Bedroom: %.1f°C", id(bedroom_temperature).state);
      } else {
        it.print(left_x, left_y, id(font_small_italic), COLOR_ON, "Bedroom: N/A");
      }
      left_y += line_height_small;

      // Bathroom Temperature
      if (!isnan(id(bathroom_temperature).state)) {
        it.printf(left_x, left_y, id(font_small), COLOR_ON, "Bathroom: %.1f°C", id(bathroom_temperature).state);
      } else {
        it.print(left_x, left_y, id(font_small_italic), COLOR_ON, "Bathroom: N/A");
      }
      left_y += line_height_small + 10; // Extra spacing before next section

      // Habit Tracker Placeholder
      it.print(left_x, left_y, id(font_medium_bold), COLOR_ON, "Habit Tracker");
      // Leave space for future content
      left_y += line_height_medium + line_height_small * 3;

      // Upcoming Events Section Title
      it.print(right_x, y, id(font_medium_bold), COLOR_ON, "Upcoming Events");
      int right_y = y + line_height_medium;

      // Collect Events
      struct Event {
        std::string name;
        std::string time;
      };
      std::vector<Event> events_list;

      if (id(calendar_1).has_state() && id(calendar_1_time).has_state()) {
        events_list.emplace_back(Event{"Event 1: " + id(calendar_1).state, id(calendar_1_time).state});
      }
      if (id(calendar_2).has_state() && id(calendar_2_time).has_state()) {
        events_list.emplace_back(Event{"Event 2: " + id(calendar_2).state, id(calendar_2_time).state});
      }
      if (id(calendar_3).has_state() && id(calendar_3_time).has_state()) {
        events_list.emplace_back(Event{"Event 3: " + id(calendar_3).state, id(calendar_3_time).state});
      }

      // Sort Events by Time
      std::sort(events_list.begin(), events_list.end(), [](const Event &a, const Event &b) -> bool {
        return a.time < b.time;
      });

      // Display Events (Limit to 4)
      int event_count = 0;
      for (const auto &event : events_list) {
        if (event_count < 4) {
          // Extract time part from ISO 8601 format
          std::string event_time = event.time.substr(11, 5);
          std::string event_display = event_time + " - " + event.name;
          it.print(right_x, right_y, id(font_small), COLOR_ON, event_display.c_str());
          right_y += line_height_small;
          event_count++;
        }
      }
      if (events_list.size() > 4) {
        it.print(right_x, right_y, id(font_small), COLOR_ON, "...more events");
        right_y += line_height_small;
      } else if (events_list.empty()) {
        it.print(right_x, right_y, id(font_small_italic), COLOR_ON, "No upcoming events");
        right_y += line_height_small;
      }
      right_y += 10;

      // Fitness Data Section Title
      it.print(right_x, right_y, id(font_medium_bold), COLOR_ON, "Fitness Data");
      right_y += line_height_medium;

      // Active Calories
      if (!isnan(id(active_calories).state)) {
        it.printf(right_x, right_y, id(font_small), COLOR_ON, "Active Calories: %.0f kcal", id(active_calories).state);
      } else {
        it.print(right_x, right_y, id(font_small_italic), COLOR_ON, "Active Calories: N/A");
      }
      right_y += line_height_small;

      // Sleep Duration
      if (!isnan(id(sleep_duration).state)) {
        float sleep_hours = id(sleep_duration).state / 60.0;
        it.printf(right_x, right_y, id(font_small), COLOR_ON, "Sleep: %.1f hours", sleep_hours);
      } else {
        it.print(right_x, right_y, id(font_small_italic), COLOR_ON, "Sleep: N/A");
      }
      right_y += line_height_small;

      // Steps Today
      if (!isnan(id(total_steps).state)) {
        it.printf(right_x, right_y, id(font_small), COLOR_ON, "Steps today: %d", (int)id(total_steps).state);
      } else {
        it.print(right_x, right_y, id(font_small_italic), COLOR_ON, "Steps today: N/A");
      }
      right_y += line_height_small + 10;

      // Connection Status at the bottom left
      if (!wifi::global_wifi_component->is_connected()) {
        it.print(margin, it.get_height() - line_height_small, id(font_small), COLOR_ON, "Offline");
      }

interval:
  - interval: 1min
    then:
      - lambda: |-
          auto now = id(homeassistant_time).now().timestamp;

          // Handle initial refresh after boot-up
          if (!id(initial_refresh_done)) {
            if ((now - id(boot_time)) >= id(initial_refresh_delay) * 60) {
              id(refresh_screen).execute();
              id(initial_refresh_done) = true;
              id(last_display_update) = now;
            }
          } else {
            // Regular display updates
            if ((now - id(last_display_update)) >= id(display_update_interval) * 60) {
              id(refresh_screen).execute();
              id(last_display_update) = now;
              if (id(manual_override)) {
                // Prevent the display_image switch from turning off automatically
                // by commenting out the following lines
                /*
                id(display_image).turn_off();
                id(manual_override) = false;
                */
              }
            }
          }

          // Check person's presence and update auto_display_image if needed
          int current_hour = id(homeassistant_time).now().hour;
          bool time_condition = (current_hour < id(morning_hour_threshold)) || (current_hour >= id(evening_hour_threshold));
          std::string presence_state = id(person_presence).state.c_str();

          ESP_LOGD("main", "Person presence state: %s", presence_state.c_str());

          bool person_home = (presence_state == "home");
          bool desired_auto_display = time_condition && person_home;

          if (id(auto_display_image).state != desired_auto_display) {
            if (desired_auto_display) {
              id(auto_display_image).turn_on();
            } else {
              id(auto_display_image).turn_off();
            }
          }
